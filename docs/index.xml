<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>/dev/log</title>
    <link>https://marc.helbling.fr/</link>
    <description>Recent content on /dev/log</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Aug 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://marc.helbling.fr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Running Citus in Docker</title>
      <link>https://marc.helbling.fr/running-citus-locally/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://marc.helbling.fr/running-citus-locally/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://citusdata.com&#34;&gt;Citus&lt;/a&gt; is an &lt;a href=&#34;https://github.com/citusdata/citus&#34;&gt;open-source&lt;/a&gt; &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; extension to distribute tables and queries on multiple shards.&#xA;The extension requires a master node aka the &lt;a href=&#34;http://docs.citusdata.com/en/v7.5/get_started/concepts.html#nodes-coordinator-and-workers&#34;&gt;coordinator&lt;/a&gt; whose role is to forward queries to workers ‚Äî that actually store data ‚Äî and gather results.&lt;/p&gt;&#xA;&lt;p&gt;While using &lt;a href=&#34;https://www.citusdata.com/product/cloud&#34;&gt;CitusCloud&lt;/a&gt; to run Citus in production is probably the best idea, it is less true for local or testing environments as network adds latency and concurrent builds require hacks (like creating random &lt;a href=&#34;https://www.postgresql.org/docs/10/static/ddl-schemas.html&#34;&gt;&lt;code&gt;schema&lt;/code&gt;s&lt;/a&gt; for each build). Relying on a local running Citus cluster in a Docker environment provides a clean solution to this problem.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vim notes &amp; plugins</title>
      <link>https://marc.helbling.fr/vim-notes/</link>
      <pubDate>Sun, 30 Aug 2015 00:00:00 +0000</pubDate>
      <guid>https://marc.helbling.fr/vim-notes/</guid>
      <description>&lt;h1 id=&#34;basic-vim&#34;&gt;Basic vim&lt;/h1&gt;&#xA;&lt;p&gt;All this is vim built-in and requires no plugin.&lt;/p&gt;&#xA;&lt;h2 id=&#34;useful-commands&#34;&gt;Useful commands&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;%&lt;/code&gt;: jump to the matching &lt;code&gt;{ .. }&lt;/code&gt; or &lt;code&gt;( .. )&lt;/code&gt; etc.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;=&lt;/code&gt;: indent visual selection (&lt;code&gt;&amp;lt;&lt;/code&gt;: shift block to the left, &lt;code&gt;&amp;gt;&lt;/code&gt;: shift block to the right)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;~&lt;/code&gt;: change case&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ctrl-x&lt;/code&gt; + : &lt;a href=&#34;https://www.youtube.com/watch?v=3TX3kV3TICU&#34;&gt;vim ‚Äòcontext aware‚Äô complete&lt;/a&gt; mode (based on &lt;code&gt;set complete&lt;/code&gt; list) in insert mode&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ctrl-n&lt;/code&gt;/&lt;code&gt;ctrl-p&lt;/code&gt;: next/previous word matching prefix (the difference with &lt;code&gt;ctrl-p&lt;/code&gt;/&lt;code&gt;ctrl-n&lt;/code&gt; is the context awareness)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ctrl-f&lt;/code&gt;: file names&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ctrl-l&lt;/code&gt;: whole lines&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ctrl-d&lt;/code&gt;: macro definitions (also in included files)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ctrl-i&lt;/code&gt;: current and included files&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ctrl-k&lt;/code&gt;: words from a dictionary&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ctrl-t&lt;/code&gt;: words from a thesaurus&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ctrl-]&lt;/code&gt;: tags&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ctrl-v&lt;/code&gt;: Vim command line&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ctrl-o&lt;/code&gt;: language aware completion&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;:set spell [spelllang=fr_fr]&lt;/code&gt;/&lt;code&gt;:set nospell&lt;/code&gt;: activate/deactivate spell checking&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;:!&amp;lt;command&amp;gt;&lt;/code&gt;: execute &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; in a shell without leaving vim (e.g. &lt;code&gt;:!make&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;:read !&amp;lt;command&amp;gt;&lt;/code&gt;: insert result of &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; on next line (e.g. &lt;code&gt;read !ls .&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ctrl-O&lt;/code&gt;, &lt;code&gt;ctrl-I&lt;/code&gt;: navigate through ‚Äú&lt;a href=&#34;http://vim.wikia.com/wiki/Jumping_to_previously_visited_locations&#34;&gt;jump locations&lt;/a&gt;‚Äù locations, both within current and other opened documents; &lt;code&gt;:jumps&lt;/code&gt; to list all jump locations.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;.&lt;/code&gt;: repeat last command&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;macros&#34;&gt;Macros&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;q&amp;lt;key&amp;gt;&lt;/code&gt;: start recording&lt;/li&gt;&#xA;&lt;li&gt;(do commands)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;q&lt;/code&gt;: stop recording&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@&amp;lt;key&amp;gt;&lt;/code&gt;: replay macro&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;advanced-editing-command-mode-exed&#34;&gt;Advanced editing (command mode ex/ed)&lt;/h2&gt;&#xA;&lt;p&gt;The command mode syntax basically reads&lt;/p&gt;</description>
    </item>
    <item>
      <title>What could go wrong?</title>
      <link>https://marc.helbling.fr/what-could-go-wrong/</link>
      <pubDate>Sun, 17 May 2015 00:00:00 +0000</pubDate>
      <guid>https://marc.helbling.fr/what-could-go-wrong/</guid>
      <description>&lt;p&gt;When dealing with software, stuff ‚Äî be it &lt;!-- raw HTML omitted --&gt;technical&lt;!-- raw HTML omitted --&gt; or &lt;!-- raw HTML omitted --&gt;human&lt;!-- raw HTML omitted --&gt; ‚Äî&#xA;quite inexorably go wrong at some point for a variety of reasons. Here is a ‚Äòmemo‚Äô list of shit that I lived or witnessed and hopefully ways to prevent them. Some points might look totally obvious but as I experienced them at least once they are probably worth listing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing json in C&#43;&#43;</title>
      <link>https://marc.helbling.fr/writing-json-c/</link>
      <pubDate>Sat, 07 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://marc.helbling.fr/writing-json-c/</guid>
      <description>&lt;p&gt;Writing a valid json file looks simple. Except that if the json file contains real world data coming from unknown sources, it might not be that simple. The &lt;a href=&#34;http://json.org&#34;&gt;json&lt;/a&gt; format does not support everything that you could expect for numerical values and strings.&lt;/p&gt;&#xA;&lt;p&gt;More specifically, a numerical value involves digits in json. This prevents from having &lt;code&gt;inf&lt;/code&gt; or &lt;code&gt;nan&lt;/code&gt; serialized in json.&#xA;Strings preferred encoding is UTF-8 with some restriction. Quotes &lt;code&gt;&amp;quot;&lt;/code&gt; and backslash &lt;code&gt;\&lt;/code&gt; have to be escaped but &lt;a href=&#34;http://en.wikipedia.org/wiki/Unicode_control_characters&#34;&gt;control characters&lt;/a&gt; should be encoded with their unicode 4 hex digits representation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>üëãüèº</title>
      <link>https://marc.helbling.fr/about/</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://marc.helbling.fr/about/</guid>
      <description>&lt;p&gt;My name is Marc Helbling. I‚Äôm a software engineer with a Ph.D thesis (‚Äú&lt;a href=&#34;http://www.theses.fr/2010ISAM0030&#34;&gt;Virtual sculpture using particles system&lt;/a&gt;‚Äù). I‚Äôve been an early stage engineer in &lt;a href=&#34;http://tinyclues.com&#34;&gt;some&lt;/a&gt; &lt;a href=&#34;http://captaintrain.com&#34;&gt;successful&lt;/a&gt; &lt;a href=&#34;http://sketchfab.com&#34;&gt;startups&lt;/a&gt;. I am now working on search relevance at &lt;a href=&#34;https://algolia.com&#34;&gt;Algolia&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I am mostly interested in building efficient teams and systems, with a special ‚ù§Ô∏è   when they deal with vertices and polygons.&lt;/p&gt;&#xA;&lt;p&gt;The posts on this blog are evolving things so the content may be updated/rewritten without any warning.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A practical introduction to git</title>
      <link>https://marc.helbling.fr/practical-git-introduction/</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://marc.helbling.fr/practical-git-introduction/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;In just a few years, &lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt; has become the dominant version control system in the software industry. Despite its widespread use, it often still appears as either magical or cumbersome when its core concepts are not fully grasped. This post is a walkthrough of practical git usage that will detail how git internally handles things.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-a-version-control-system&#34;&gt;Why a Version Control System?&lt;/h2&gt;&#xA;&lt;p&gt;When not relying on a dedicated tool to keep track of versions, one has to employ strategies such as using naming schemes like &lt;a href=&#34;http://www.phdcomics.com/comics/archive/phd101212s.gif&#34;&gt;&lt;code&gt;[filename]_v{0-9}+.doc&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;[timestamp]_[filename]_[comment].zip&lt;/code&gt; (where e.g. using the &lt;a href=&#34;http://en.wikipedia.org/wiki/ISO_8601&#34;&gt;ISO 8601&lt;/a&gt; format for dates will sort version) to keep track of things.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Job interviews</title>
      <link>https://marc.helbling.fr/interviews/</link>
      <pubDate>Sat, 13 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://marc.helbling.fr/interviews/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://techcrunch.com/2013/06/22/the-technical-interview-is-dead/&#34;&gt;Like it or not&lt;/a&gt;, technical interviews&#xA;are still a reality in the software industry and I don‚Äôt expect this to radically change anytime soon.&lt;/p&gt;&#xA;&lt;p&gt;Getting a job in a place where you have &lt;a href=&#34;http://www.karenx.com/blog/how-to-get-a-job-when-you-have-no-connections/&#34;&gt;no connection&lt;/a&gt;&#xA;can prove very hard. The obvious guess: the bigger/hotter the company, the harder. You may try to be&#xA;original but I‚Äôm not sure this works very often for technical positions. From my experience, you better&#xA;be concise, have a clear message, show why you care about the company you‚Äôre applying at and hopefully&#xA;you‚Äôll have a chance to show them your abilities. Of course, if you‚Äôve already shown the world with&#xA;some of your project, this might have proven easier than it sounds to get to the interview process.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://marc.helbling.fr/post/draft/ownership/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://marc.helbling.fr/post/draft/ownership/</guid>
      <description>&lt;h2 id=&#34;reading-list&#34;&gt;Reading list:&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/handbook/people-group/directly-responsible-individuals/&#34;&gt;https://about.gitlab.com/handbook/people-group/directly-responsible-individuals/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://taylorpearson.me/interestingtimes/andon-cord/&#34;&gt;https://taylorpearson.me/interestingtimes/andon-cord/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
